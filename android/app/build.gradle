def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterRoot = localProperties.getProperty('flutter.sdk')
if (flutterRoot == null) {
    throw new GradleException("Flutter SDK not found. Define location with flutter.sdk in the local.properties file.")
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply from: "$flutterRoot/packages/flutter_tools/gradle/flutter.gradle"
//apply plugin: 'com.google.gms.google-services'
//apply plugin: 'com.google.firebase.crashlytics'

static def getTime() {
    return new Date().format("yyyyMMddHHmmss", TimeZone.getTimeZone("GMT+08:00"))
}

android {
    compileSdkVersion rootProject.ext.android["compileSdk"]
    defaultConfig {
        applicationId rootProject.ext.android["applicationId"]
        minSdkVersion rootProject.ext.android["minSdk"]
        targetSdkVersion rootProject.ext.android["targetSdk"]
        versionCode rootProject.ext.android["versionCode"]
        versionName rootProject.ext.android["versionName"]
        ndk {
            abiFilters 'armeabi-v7a', 'arm64-v8a'
        }
       multiDexEnabled true
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    dexOptions {
        javaMaxHeapSize "4g"
    }
    lintOptions {
        abortOnError false
        checkReleaseBuilds false
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    bundle {
        language {
            enableSplit = false
        }
        density {
            enableSplit = false
        }
        abi {
            enableSplit = false
        }
    }

    Properties properties = new Properties()
    InputStream inputStream = project.rootProject.file('app/key.properties').newDataInputStream()
    properties.load(inputStream)
    def sdkDir = properties.getProperty('storeFile')
    def key_file = file(sdkDir)
    def key_keyAlias = properties.getProperty('keyAlias')
    def key_keyPassword = properties.getProperty('keyPassword')
    def key_storePassword = properties.getProperty('keyStorePassword')
    signingConfigs {
        debug {
            storeFile key_file
            storePassword key_storePassword
            keyAlias key_keyAlias
            keyPassword key_keyPassword
        }
        release {
            storeFile key_file
            storePassword key_storePassword
            keyAlias key_keyAlias
            keyPassword key_keyPassword
        }
    }
    buildTypes {
        release {

            minifyEnabled true
            shrinkResources true
            zipAlignEnabled true
            signingConfig signingConfigs.release
//            firebaseCrashlytics {
//                mappingFileUploadEnabled false
//            }
        }
        debug {
            minifyEnabled false
            shrinkResources false
            zipAlignEnabled false
            signingConfig signingConfigs.debug
        }
    }

    android.applicationVariants.all { variant ->
        variant.outputs.all { output ->
            def fileName
            if (variant.buildType.name == "release") {
                fileName = "rapicredito_${versionName}(${versionCode})_${getTime()}_${buildType.name}.apk"
            } else {
                fileName = "rapicredito_${versionName}(${versionCode})_${buildType.name}.apk"
            }
            outputFileName = fileName
        }
    }

}

flutter {
    source '../..'
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation fileTree(include: ['*.aar'], dir: 'libs')
    implementation rootProject.depsLibs.multidex
    implementation "com.google.android.gms:play-services-location:17.0.0"
    implementation 'im.crisp:crisp-sdk:1.0.12'
    implementation 'com.facebook.android:facebook-android-sdk:16.2.0'
    implementation 'io.branch.sdk.android:library:5.+'
    implementation 'androidx.browser:browser:1.0.0'
    implementation  'com.google.android.gms:play-services-ads-identifier:17.1.0+'
//    implementation 'com.google.firebase:firebase-crashlytics'
//    implementation 'com.google.firebase:firebase-analytics'

}
